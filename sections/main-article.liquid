{{ 'section-blog-post.css' | asset_url | stylesheet_tag }}

<article class="article-template" itemscope itemtype="http://schema.org/BlogPosting">  
  {%- for block in section.blocks -%}
    {%- case block.type -%}
      {%- when '@app' -%}
        <div class="page-width page-width">
          {% render block %}
        </div>
      {%- when 'featured_image'-%}
        {%- if article.image -%}
          <div class="article-template__hero-container" {{ block.shopify_attributes }}>
            <div class="article-template__hero-{{ block.settings.image_height }} media"
              itemprop="image"
              {% if block.settings.image_height == 'adapt' and article.image %} style="padding-bottom: {{ 1 | divided_by: article.image.aspect_ratio | times: 100 }}%;"{% endif %}
            >
              <img
                srcset="{% if article.image.width >= 350 %}{{ article.image | image_url: width: 350 }} 350w,{% endif %}
                  {% if article.image.width >= 750 %}{{ article.image | image_url: width: 750 }} 750w,{% endif %}
                  {% if article.image.width >= 1100 %}{{ article.image | image_url: width: 1100 }} 1100w,{% endif %}
                  {% if article.image.width >= 1500 %}{{ article.image | image_url: width: 1500 }} 1500w,{% endif %}
                  {% if article.image.width >= 2200 %}{{ article.image | image_url: width: 2200 }} 2200w,{% endif %}
                  {% if article.image.width >= 3000 %}{{ article.image | image_url: width: 3000 }} 3000w,{% endif %}
                  {{ article.image | image_url }} {{ article.image.width }}w"
                sizes="(min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 100 }}px, (min-width: 750px) calc(100vw - 10rem), 100vw"
                src="{{ article.image | image_url: width: 1100 }}"
                loading="lazy"
                width="{{ article.image.width }}"
                height="{{ article.image.height }}"
                alt="{{ article.image.alt | escape }}">
            </div>
          </div>
        {%- endif -%}

        {%- when 'title'-%}
          <header class="page-width page-width-" {{ block.shopify_attributes }}>
            <h1 class="article-template__title" itemprop="headline">{{ article.title | escape }}</h1>
            {%- if block.settings.blog_show_date -%}
              {% comment %} <span class="circle-divider caption-with-letter-spacing" itemprop="dateCreated pubdate datePublished">{{ article.published_at | time_tag: format: 'date' }}</span> {% endcomment %}
              <span class="circle-divider caption-with-letter-spacing">{{ article.published_at | time_tag: format: 'date' }}</span>
            {%- endif -%}
            {%- if block.settings.blog_show_author -%}
              <span class="caption-with-letter-spacing" itemprop="author" itemscope itemtype="http://schema.org/Person">
                <span itemprop="name">{{ article.author }}</span>
              </span>
            {%- endif -%}
          </header>

          <div class="table-of-contents page-width" style="margin-top: 20px;{% if article.metafields.custom.hide_table_of_contents %}display:none;{% endif %}"></div>

        {%- when 'content'-%}
          <div class="article-template__content page-width page-width rte blog-container" itemprop="articleBody" {{ block.shopify_attributes }}>
              {{ article.content }}
          </div>

        {%- when 'share' -%}
          <div class="article-template__social-sharing page-width page-width" {{ block.shopify_attributes }}>
            <share-button class="share-button" {{ block.shopify_attributes }}>
              <button class="share-button__button hidden">
                {% render 'icon-share' %}
                {{ block.settings.share_label | escape }}
              </button>
              <details id="Details-{{ block.id }}-{{ section.id }}">
                <summary class="share-button__button">
                  {% render 'icon-share' %}
                  {{ block.settings.share_label | escape }}
                </summary>
                <div id="Article-share-{{ section.id }}" class="share-button__fallback motion-reduce">
                  <div class="field">
                    <span id="ShareMessage-{{ section.id }}" class="share-button__message hidden" role="status">
                    </span>
                    <input type="text"
                          class="field__input"
                          id="url"
                          value="{{ request.origin | append: article.url }}"
                          placeholder="{{ 'general.share.share_url' | t }}"
                          onclick="this.select();"
                          readonly
                    >
                    <label class="field__label" for="url">{{ 'general.share.share_url' | t }}</label>
                  </div>
                  <button class="share-button__close hidden no-js-hidden">
                    {% render 'icon-close' %}
                    <span class="visually-hidden">{{ 'general.share.close' | t }}</span>
                  </button>
                  <button class="share-button__copy no-js-hidden">
                    {% render 'icon-clipboard' %}
                    <span class="visually-hidden">{{ 'general.share.copy_to_clipboard' | t }}</span>
                  </button>
                </div>
              </details>
            </share-button>
            <script src="{{ 'share.js' | asset_url }}" defer="defer"></script>
          </div>
    {%- endcase -%}
  {%- endfor -%}

  <div class="article-template__back element-margin-top center">
    <a href="{{ blog.url }}" class="article-template__link link animate-arrow">
      <span class="icon-wrap">{% render 'icon-arrow' %}</span>
      {{ 'blogs.article.back_to_blog' | t: title: blog.title }}
    </a>
  </div>
  {%- if blog.comments_enabled? -%}
    <div class="article-template__comment-wrapper background-secondary">
      <div id="comments" class="page-width page-width">
        {%- if article.comments_count > 0 -%}
          {%- assign anchorId = '#Comments-' | append: article.id -%}

          <h2 id="Comments-{{ article.id }}" tabindex="-1">{{ 'blogs.article.comments' | t: count: article.comments_count }}</h2>
          {% paginate article.comments by 5 %}
            <div class="article-template__comments">
              {%- if comment.status == 'pending' and comment.content -%}
                <article id="{{ comment.id }}" class="article-template__comments-comment">
                  {{ comment.content }}
                  <footer class="right">
                    <span class="circle-divider caption-with-letter-spacing">{{ comment.author }}</span>
                  </footer>
                </article>
              {%- endif -%}

              {%- for comment in article.comments -%}
                <article id="{{ comment.id }}" class="article-template__comments-comment">
                  {{ comment.content }}
                  <footer class="right">
                    <span class="circle-divider caption-with-letter-spacing">{{ comment.author }}</span><span class="caption-with-letter-spacing">{{ comment.created_at | time_tag: format: 'date' }}</span>
                  </footer>
                </article>
              {%- endfor -%}
              {% render 'pagination', paginate: paginate, anchor: anchorId %}
            </div>
          {% endpaginate %}
        {%- endif -%}
        {% form 'new_comment', article %}
          {%- liquid
            assign post_message = 'blogs.article.success'
            if blog.moderated? and comment.status == 'unapproved'
              assign post_message = 'blogs.article.success_moderated'
            endif
          -%}
          <h2>{{ 'blogs.article.comment_form_title' | t }}</h2>
          {%- if form.errors -%}
            <div class="form__message" role="alert">
              <h3 class="form-status caption-large text-body" tabindex="-1" autofocus>
                {% render 'icon-error' %} {{ 'templates.contact.form.error_heading' | t }}
              </h3>
            </div>
            <ul class="form-status-list caption-large">
              {%- for field in form.errors -%}
                <li>
                  <a href="#CommentForm-{{ field }}" class="link">
                    {%- if form.errors.translated_fields[field] contains 'author' -%}
                      {{ 'blogs.article.name' | t }}
                    {%- elsif form.errors.translated_fields[field] contains 'body'-%}
                     {{ 'blogs.article.message' | t }}
                    {%- else -%}
                      {{ form.errors.translated_fields[field] }}
                    {%- endif -%}
                    {{ form.errors.messages[field] }}
                  </a>
                </li>
              {%- endfor -%}
            </ul>
          {%- elsif form.posted_successfully? -%}
            <div class="form-status-list form__message" role="status">
              <h3 class="form-status" tabindex="-1" autofocus>{% render 'icon-success' %} {{ post_message | t }}</h3>
            </div>
          {%- endif -%}

          <div{% if blog.moderated? == false %} class="article-template__comments-fields"{% endif %}>
            <div class="article-template__comment-fields">
              <div class="field field--with-error">
                <input
                  type="text"
                  name="comment[author]"
                  id="CommentForm-author"
                  class="field__input"
                  autocomplete="name"
                  value="{{ form.author }}"
                  aria-required="true"
                  required
                  {% if form.errors contains 'author' %}
                    aria-invalid="true"
                    aria-describedby="CommentForm-author-error"
                  {% endif %}
                  placeholder="{{ 'blogs.article.name' | t }}"
                >
                <label class="field__label" for="CommentForm-author">{{ 'blogs.article.name' | t }} <span aria-hidden="true">*</span></label>
                {%- if form.errors contains 'author' -%}
                  <small id="CommentForm-author-error">
                    <span class="form__message">{% render 'icon-error' %}{{ 'blogs.article.name' | t }} {{ form.errors.messages['author'] }}.</span>
                  </small>
                {%- endif -%}
              </div>
              <div class="field field--with-error">
                <input
                  type="email"
                  name="comment[email]"
                  id="CommentForm-email"
                  autocomplete="email"
                  class="field__input"
                  value="{{ form.email }}"
                  autocorrect="off"
                  autocapitalize="off"
                  aria-required="true"
                  required
                  {% if form.errors contains 'email' %}
                    aria-invalid="true"
                    aria-describedby="CommentForm-email-error"
                  {% endif %}
                  placeholder="{{ 'blogs.article.email' | t }}"
                >
                <label class="field__label" for="CommentForm-email">{{ 'blogs.article.email' | t }} <span aria-hidden="true">*</span></label>
                {%- if form.errors contains 'email' -%}
                  <small id="CommentForm-email-error">
                    <span class="form__message">{% render 'icon-error' %}{{ 'blogs.article.email' | t }} {{ form.errors.messages['email'] }}.</span>
                  </small>
                {%- endif -%}
              </div>
            </div>
            <div class="field field--with-error">
              <textarea
                rows="5"
                name="comment[body]"
                id="CommentForm-body"
                class="text-area field__input"
                aria-required="true"
                required
                {% if form.errors contains 'body' %}
                  aria-invalid="true"
                  aria-describedby="CommentForm-body-error"
                {% endif %}
                placeholder="{{ 'blogs.article.message' | t }}"
              >{{ form.body }}</textarea>
                <label class="form__label field__label" for="CommentForm-body">{{ 'blogs.article.message' | t }} <span aria-hidden="true">*</span></label>
            </div>
            {%- if form.errors contains 'body' -%}
              <small id="CommentForm-body-error">
                <span class="form__message">{% render 'icon-error' %}{{ 'blogs.article.message' | t }} {{ form.errors.messages['body'] }}.</span>
              </small>
            {%- endif -%}
          </div>
          {%- if blog.moderated? -%}
            <p class="article-template__comment-warning caption">{{ 'blogs.article.moderated' | t }}</p>
          {%- endif -%}
          <input type="submit" class="button" value="{{ 'blogs.article.post' | t }}">
        {% endform %}
      </div>
  </div>
  {%- endif -%}
</article>
<style>
  .article-template__content a {
    text-decoration: none;
    color: {{ settings.colors_accent_1 }} !important;
  }
</style>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Article",
    "articleBody": {{ article.content | strip_html | json }},
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": {{ request.origin | append: page.url | json }}
    },
    "headline": {{ article.title | json }},
    {% if article.excerpt != blank %}
      "description": {{ article.excerpt | strip_html | json }},
    {% endif %}
    {% if article.image %}
      "image": [
        {{ article | image_url: width: article.image.width | prepend: "https:" | json }}
      ],
    {% endif %}
    "datePublished": {{ article.published_at | date: '%Y-%m-%dT%H:%M:%SZ' | json }},
    "dateCreated": {{ article.created_at | date: '%Y-%m-%dT%H:%M:%SZ' | json }},
    "author": {
      "@type": "Person",
      "name": {{ article.author | json }}
    },
    "publisher": {
      "@type": "Organization",
      {% if settings.share_image %}
        "logo": {
          "@type": "ImageObject",
          "height": {{ settings.share_image.height | json }},
          "url": {{ settings.share_image | image_url: width: settings.share_image.width | prepend: "https:" | json }},
          "width": {{ settings.share_image.width | json }}
        },
      {% endif %}
      "name": {{ shop.name | json }}
    }
  }
</script>

<style>
    {%- if article.metafields.custom.full_width_images != false -%}
      .article-template__content img {
        width: 100%;
        height: auto;
      }
    {%- endif -%}
    .blog-container div img, .blog-container p img {
      display: block;
      margin: 10px auto 0 !important;
    }
    a, a:visited {
      color: black;
    }
    h2 {
      margin: 1em 0px 0px;
      font-size: 2em;
    }
    li {
      margin: 8px 0px;
    }
    img.float_right {
        float: right;
        margin: 20px 0 20px 5%;
        width: 40%;
    }
    img.float_left {
        float: left;
        margin: 20px 5% 20px 0px;
        width: 40%;
    }
    @media only screen and (max-width: 700px) {
        img.float_right {
            float: none;
            width: 100%;
        }
        img.float_left {
            float: none;
            width: 100%;
        } 
        img {
            float: none;
            width: 100%;
        } 
    }

</style>

<script>
  // Get all the h2 tags in the document
  const headings = document.querySelectorAll('.blog-container h2');

  // Create a table of contents container element
  const tocContainer = document.querySelector('.table-of-contents');

  // Create a heading for the table of contents
  const tocHeading = document.createElement('h2');
  tocHeading.textContent = 'Table of Contents';

  // Create an unordered list to hold the table of contents items
  const tocList = document.createElement('ul');

  // Iterate over each heading and create a table of contents item
  headings.forEach((heading, index) => {
    // Generate an ID for the heading if it doesn't have one
    if (!heading.id) {
      heading.id = `section-${index + 1}`;
    }

    // Create a list item for the table of contents
    const tocItem = document.createElement('li');

    // Create a link to the heading
    const tocLink = document.createElement('a');
    tocLink.href = `#${heading.id}`;
    tocLink.textContent = heading.textContent;

    // Append the link to the list item
    tocItem.appendChild(tocLink);

    // Append the list item to the table of contents list
    tocList.appendChild(tocItem);
  });

  // Append the table of contents heading and list to the container
  tocContainer.appendChild(tocHeading);
  tocContainer.appendChild(tocList);
</script>

{% comment %}
  Inline Anchor Images for Shopify Blog Posts
  
  This code will inject featured images below paragraphs that contain
  anchor links to products, collections, or blogs.
  
  Add this to your article template (e.g., article.liquid)
{% endcomment %}

<style>
  /* Styling for injected images */
  .dynamic-image-container {
    margin: 1.5rem 0;
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    justify-content: flex-start;
  }
  
  .dynamic-image-item {
    max-width: 200px;
    margin-bottom: 10px;
    transition: transform 0.2s ease;
    border-radius: 5px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  
  .dynamic-image-item:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }
  
  .dynamic-image-item a {
    display: block;
    text-decoration: none;
    color: inherit;
  }
  
  .dynamic-image-item img {
    width: 100%;
    height: auto;
    display: block;
    border-radius: 5px 5px 0 0;
  }
  
  .dynamic-image-caption {
    padding: 8px;
    font-size: 0.9rem;
    text-align: center;
    background: #f9f9f9;
  }
  
  /* Loading indicator */
  .image-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 50px;
    margin: 1rem 0;
  }
  
  .image-loading:after {
    content: " ";
    display: block;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    border: 4px solid #ccc;
    border-color: #ccc transparent #ccc transparent;
    animation: image-loading 1.2s linear infinite;
  }
  
  @keyframes image-loading {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>


<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Process the article content
    const articleContent = document.querySelector('.article__content');
    if (!articleContent) return;
    
    // Find all paragraphs that contain links
    const paragraphs = articleContent.querySelectorAll('p');
    
    // Track paragraphs that have been processed
    const processedParagraphs = new Set();
    
    // Process each paragraph
    paragraphs.forEach(paragraph => {
      // Skip if already processed
      if (processedParagraphs.has(paragraph)) return;
      
      // Find all links in this paragraph
      const links = paragraph.querySelectorAll('a');
      const shopifyLinks = [];
      
      // Filter and process shopify links
      links.forEach(link => {
        const href = link.getAttribute('href');
        if (!href) return;
        
        // Check if it's a link to a product, collection, or blog
        const isProductLink = href.includes('/products/');
        const isCollectionLink = href.includes('/collections/') && !href.includes('/products');
        const isBlogLink = href.includes('/blogs/');
        
        if (isProductLink || isCollectionLink || isBlogLink) {
          // Determine link type and extract handle
          let type, handle, blogHandle, articleHandle;
          
          if (isProductLink) {
            type = 'product';
            handle = href.split('/products/')[1].split(/[?#]/)[0];
          } else if (isCollectionLink) {
            type = 'collection';
            handle = href.split('/collections/')[1].split(/[?#]/)[0];
          } else if (isBlogLink) {
            type = 'blog';
            const parts = href.split('/blogs/')[1].split(/[?#]/)[0].split('/');
            blogHandle = parts[0];
            if (parts.length > 1) {
              articleHandle = parts[1];
            }
            handle = parts[0];
          }
          
          shopifyLinks.push({
            element: link,
            href,
            type,
            handle,
            blogHandle,
            articleHandle
          });
        }
      });
      
      // If we found Shopify links, create a container after this paragraph
      if (shopifyLinks.length > 0) {
        processedParagraphs.add(paragraph);
        
        // Create container for images
        const imageContainer = document.createElement('div');
        imageContainer.className = 'dynamic-image-container';
        
        // Insert loading indicator initially
        const loadingIndicator = document.createElement('div');
        loadingIndicator.className = 'image-loading';
        imageContainer.appendChild(loadingIndicator);
        
        // Insert container after paragraph
        paragraph.after(imageContainer);
        
        // Process each link and fetch images
        const imagePromises = shopifyLinks.map(link => {
          return fetchImageInfo(link).then(info => {
            if (info && info.imageUrl) {
              return createImageElement(info, link.href);
            }
            return null;
          }).catch(error => {
            console.error('Error fetching image info:', error);
            return null;
          });
        });
        
        // When all images are fetched, add them to the container
        Promise.all(imagePromises).then(imageElements => {
          // Remove loading indicator
          loadingIndicator.remove();
          
          // Add all valid image elements to the container
          imageElements.filter(el => el !== null).forEach(el => {
            imageContainer.appendChild(el);
          });
          
          // If no images were found, remove the empty container
          if (imageContainer.children.length === 0) {
            imageContainer.remove();
          }
        });
      }
    });
  });
  
  // Function to fetch image information based on link type
  function fetchImageInfo(link) {
    switch (link.type) {
      case 'product':
        return fetchProductImage(link.handle);
      case 'collection':
        return fetchCollectionImage(link.handle);
      case 'blog':
        if (link.articleHandle) {
          return fetchArticleImage(link.blogHandle, link.articleHandle);
        } else {
          return fetchBlogImage(link.blogHandle);
        }
      default:
        return Promise.resolve(null);
    }
  }
  
  // Function to create an image element
  function createImageElement(info, href) {
    const imageItem = document.createElement('div');
    imageItem.className = 'dynamic-image-item';
    
    const link = document.createElement('a');
    link.href = href;
    
    const img = document.createElement('img');
    img.src = info.imageUrl;
    img.alt = info.title;
    img.loading = 'lazy';
    
    const caption = document.createElement('div');
    caption.className = 'dynamic-image-caption';
    caption.textContent = info.title;
    
    link.appendChild(img);
    link.appendChild(caption);
    imageItem.appendChild(link);
    
    return imageItem;
  }
  
  // Function to fetch product image
  function fetchProductImage(handle) {
    return new Promise((resolve, reject) => {
      fetch(`/products/${handle}?view=json`)
        .then(response => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.text();
        })
        .then(html => {
          // Extract JSON from the response
          let jsonMatch = html.match(/<script type="application\/json" id="ProductJson-product-template">([\s\S]*?)<\/script>/);
          if (!jsonMatch) {
            jsonMatch = html.match(/<script type="application\/json" id="ProductJson-.*?">([\s\S]*?)<\/script>/);
          }
          
          if (jsonMatch && jsonMatch[1]) {
            const productData = JSON.parse(jsonMatch[1]);
            let imageUrl = '';
            let title = '';
            
            if (productData.featured_image) {
              imageUrl = productData.featured_image;
            } else if (productData.images && productData.images.length > 0) {
              imageUrl = productData.images[0];
            }
            
            if (productData.title) {
              title = productData.title;
            }
            
            resolve({ imageUrl, title });
          } else {
            // Try to extract image directly from HTML
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const img = doc.querySelector('.product__media img, .product-featured-media img, .featured-image');
            const titleElem = doc.querySelector('.product__title, .product-single__title');
            
            const imageUrl = img ? img.src || img.dataset.src : '';
            const title = titleElem ? titleElem.textContent.trim() : handle.replace(/-/g, ' ');
            
            resolve({ imageUrl, title });
          }
        })
        .catch(error => {
          console.error('Error fetching product:', error);
          reject(error);
        });
    });
  }
  
  // Function to fetch collection image
  function fetchCollectionImage(handle) {
    return new Promise((resolve, reject) => {
      fetch(`/collections/${handle}?view=json`)
        .then(response => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.text();
        })
        .then(html => {
          // Try to extract image directly from HTML
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const img = doc.querySelector('.collection-hero__image, .collection-image img');
          const titleElem = doc.querySelector('.collection-hero__title, .collection-title');
          
          let imageUrl = '';
          if (img) {
            // For responsive images, check srcset or data attributes
            imageUrl = img.currentSrc || img.src || img.dataset.src || '';
          }
          
          const title = titleElem ? 
            titleElem.textContent.trim() : 
            handle.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          
          resolve({ imageUrl, title });
        })
        .catch(error => {
          console.error('Error fetching collection:', error);
          reject(error);
        });
    });
  }
  
  // Function to fetch blog article image
  function fetchArticleImage(blogHandle, articleHandle) {
    return new Promise((resolve, reject) => {
      fetch(`/blogs/${blogHandle}/${articleHandle}?view=json`)
        .then(response => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.text();
        })
        .then(html => {
          // Try to extract image directly from HTML
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const img = doc.querySelector('.article__featured-image, .article-featured-image img');
          const titleElem = doc.querySelector('.article__title, .article-title');
          
          let imageUrl = '';
          if (img) {
            imageUrl = img.currentSrc || img.src || img.dataset.src || '';
          }
          
          const title = titleElem ? 
            titleElem.textContent.trim() : 
            articleHandle.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          
          resolve({ imageUrl, title });
        })
        .catch(error => {
          console.error('Error fetching article:', error);
          reject(error);
        });
    });
  }
  
  // Function to fetch blog image (index page)
  function fetchBlogImage(blogHandle) {
    return new Promise((resolve, reject) => {
      fetch(`/blogs/${blogHandle}?view=json`)
        .then(response => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.text();
        })
        .then(html => {
          // Try to extract blog image if available
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const img = doc.querySelector('.blog-hero__image, .blog-featured-image img');
          const titleElem = doc.querySelector('.blog-hero__title, .blog-title');
          
          let imageUrl = '';
          if (img) {
            imageUrl = img.currentSrc || img.src || img.dataset.src || '';
          }
          
          const title = titleElem ? 
            titleElem.textContent.trim() : 
            `Blog: ${blogHandle.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}`;
          
          resolve({ imageUrl, title });
        })
        .catch(error => {
          console.error('Error fetching blog:', error);
          reject(error);
        });
    });
  }
</script>

{% comment %}
  Note: Consider creating alternate templates for JSON requests:
  - products/product.json.liquid
  - collections/collection.json.liquid 
  - articles/article.json.liquid
  - blog.json.liquid
  
  This would allow for cleaner data extraction, but the current implementation
  will work with standard theme templates.
{% endcomment %}


{% schema %}
{
  "name": "t:sections.main-article.name",
  "tag": "section",
  "class": "section",
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "featured_image",
      "name": "t:sections.main-article.blocks.featured_image.name",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "image_height",
          "options": [
            {
              "value": "adapt",
              "label": "t:sections.main-article.blocks.featured_image.settings.image_height.options__1.label"
            },
            {
              "value": "small",
              "label": "t:sections.main-article.blocks.featured_image.settings.image_height.options__2.label"
            },
            {
              "value": "medium",
              "label": "t:sections.main-article.blocks.featured_image.settings.image_height.options__3.label"
            },
            {
              "value": "large",
              "label": "t:sections.main-article.blocks.featured_image.settings.image_height.options__4.label"
            }
          ],
          "default": "adapt",
          "label": "t:sections.main-article.blocks.featured_image.settings.image_height.label",
          "info": "t:sections.main-article.blocks.featured_image.settings.image_height.info"
        }
      ]
    },
    {
      "type": "title",
      "name": "t:sections.main-article.blocks.title.name",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "blog_show_date",
          "default": true,
          "label": "t:sections.main-article.blocks.title.settings.blog_show_date.label"
        },
        {
          "type": "checkbox",
          "id": "blog_show_author",
          "default": false,
          "label": "t:sections.main-article.blocks.title.settings.blog_show_author.label"
        }
      ]
    },
    {
      "type": "content",
      "name": "t:sections.main-article.blocks.content.name",
      "limit": 1
    },
    {
      "type": "share",
      "name": "t:sections.main-article.blocks.share.name",
      "limit": 2,
      "settings": [
        {
          "type": "text",
          "id": "share_label",
          "label": "t:sections.main-article.blocks.share.settings.text.label",
          "default": "Share"
        },
        {
          "type": "paragraph",
          "content": "t:sections.main-article.blocks.share.settings.featured_image_info.content"
        },
        {
          "type": "paragraph",
          "content": "t:sections.main-article.blocks.share.settings.title_info.content"
        }
      ]
    }
  ]
}
{% endschema %}
