{% liquid
  assign is_blog = false
  assign is_hapny = false
  assign is_hapny_vendor = false
  assign skip_popup_render = false

  if request.page_type == 'product'
    if product and product.vendor
      assign normalized_vendor = product.vendor | strip | downcase
      if normalized_vendor == 'hapny home'
        assign is_hapny_vendor = true
      endif
    endif
  endif

  if is_hapny_vendor and settings.enable_hapny_popup
    assign is_hapny = true
  elsif is_hapny_vendor
    assign skip_popup_render = true
  endif

  if canonical_url contains '/blogs/' or canonical_url contains '/blog'
    assign is_blog = true
  endif

  assign default_button_label = 'Unlock Markdowns'

  if is_hapny
    assign popup_header = settings.hapny_header_popup_message | default: settings.header_popup_message
    assign popup_body = settings.hapny_popup_message | default: settings.popup_message
    assign popup_img = settings.hapny_popup_image_desktop | default: settings.popup_image_desktop
    assign popup_img_mobile = settings.hapny_popup_image_mobile | default: settings.popup_image_mobile
    assign success_msg = settings.hapny_custom_success_message | default: settings.custom_success_message
    assign popup_button_label = settings.hapny_popup_button_label | default: settings.popup_button_label | default: default_button_label
  elsif is_blog
    assign popup_header = settings.blog_header_popup_message
    assign popup_body = settings.blog_popup_message
    assign popup_img = settings.blog_popup_image_desktop
    assign popup_img_mobile = settings.blog_popup_image_mobile
    assign success_msg = settings.blog_custom_success_message
    assign popup_button_label = settings.blog_popup_button_label | default: settings.popup_button_label | default: default_button_label
  else
    assign popup_header = settings.header_popup_message
    assign popup_body = settings.popup_message
    assign popup_img = settings.popup_image_desktop
    assign popup_img_mobile = settings.popup_image_mobile
    assign success_msg = settings.custom_success_message
    assign popup_button_label = settings.popup_button_label | default: default_button_label
  endif

  assign popup_context = 'default'
  if is_hapny
    assign popup_context = 'hapny'
  elsif is_blog
    assign popup_context = 'blog'
  endif

  assign popup_body_font_desktop = settings.popup_body_font_size | default: '1rem'
  assign popup_body_font_mobile = settings.popup_body_font_size_mobile | default: popup_body_font_desktop
  assign popup_header_font_desktop = settings.popup_header_font_size | default: '1.4rem'
  assign popup_header_font_mobile = settings.popup_header_font_size_mobile | default: popup_header_font_desktop
  assign popup_subheader_font_desktop = settings.popup_subheader_font_size | default: popup_body_font_desktop
  assign popup_subheader_font_mobile = settings.popup_subheader_font_size_mobile | default: popup_subheader_font_desktop
  assign popup_border_radius = settings.popup_border_radius | default: 8
  assign popup_overlay_opacity_percentage = settings.popup_overlay_opacity | default: 50
  assign popup_overlay_opacity = popup_overlay_opacity_percentage | divided_by: 100.0
  assign popup_delay_seconds = settings.popup_delay_seconds | default: 3
  assign popup_background_color = settings.popup_background_color | default: '#FAF9F6'
  assign popup_background_blur = settings.popup_background_blur | default: 10
  assign popup_panel_opacity = popup_overlay_opacity_percentage | times: 0.01
  assign popup_panel_color = popup_background_color | color_modify: 'alpha', popup_panel_opacity
  assign popup_variant_tag_default = settings.popup_variant_tag_default | default: 'popup-default'
  assign hapny_popup_variant_tag = settings.hapny_popup_variant_tag | default: 'popup-hapny'
  assign blog_popup_variant_tag = settings.blog_popup_variant_tag | default: 'popup-blog'
  assign popup_variant_tag = popup_variant_tag_default
  if is_hapny
    assign popup_variant_tag = hapny_popup_variant_tag
  elsif is_blog
    assign popup_variant_tag = blog_popup_variant_tag
  endif
  assign popup_context_tag = 'popup-context-' | append: popup_context
  assign popup_tags = popup_variant_tag
  if popup_context_tag != blank
    assign popup_tags = popup_tags | append: ', ' | append: popup_context_tag
  endif
%}
{% unless skip_popup_render %}
  <div
    id="email-popup"
    class="popup"
    data-context="{{ popup_context }}">
    <div class="popup-content">
      <span class="close-popup" id="popup-close-button">&times;</span>
      <div class="popup-inner">
        <div class="popup-image-container">
          {% comment %} {{ popup_img | image_url: width: 800 | image_tag: class: 'popup-image', alt: 'Popup Image' }} {% endcomment %}
          {% if popup_img_mobile != blank or popup_img != blank %}
            <picture>
              {% if popup_img_mobile != blank %}
                <source media="(max-width: 749px)" srcset="{{ popup_img_mobile | image_url: width: 800 }}">
              {% endif %}
              {% if popup_img != blank %}
                <img
                  class="popup-image"
                  src="{{ popup_img | image_url: width: 1200 }}"
                  alt="Popup Image"
                  loading="lazy">
              {% else %}
                {% if popup_img_mobile != blank %}
                  <img
                    class="popup-image"
                    src="{{ popup_img_mobile | image_url: width: 1200 }}"
                    alt="Popup Image"
                    loading="lazy">
                {% endif %}
              {% endif %}
            </picture>
          {% endif %}
        </div>
        <div class="popup-text-container">
          {%- form 'customer'
            , id: 'homepage-popup'
            , class: 'isolate' -%}
            <input
              type="hidden"
              name="contact[tags]"
              value="{{ popup_tags }}">
            {%- if form.posted_successfully? -%}
              <div
                class="form-status form-status-list form__message"
                tabindex="-1"
                autofocus>{% render 'icon-success' %} Thanks for subscribing, here is your X code for 15% off.
              </div>
            {%- elsif form.errors -%}
              <div class="form__message">
                <h2
                  class="form-status caption-large text-body"
                  role="alert"
                  tabindex="-1"
                  autofocus>{% render 'icon-error' %} {{ 'templates.contact.form.error_heading' | t }}</h2>
              </div>
              <ul class="form-status-list caption-large" role="list">
                <li>
                  <a href="#ContactForm-email" class="link">
                    {{ form.errors.translated_fields['email'] | capitalize }} {{ form.errors.messages['email'] }}
                  </a>
                </li>
              </ul>
            {%- endif -%}
            <div class="contact__fields">
              <p class="popup-header" style="margin: {{ settings.popup_header_margin_top}} 0 0 0; line-height: 1.2; text-align: {{ settings.popup_alignment }};">
                {{ popup_header }}
              </p>
              <p class="popup-subheader" style="margin: {{ settings.popup_body_margin_top}} 0 {{ settings.popup_body_margin_bottom}} 0; line-height: 1.2; text-align: {{ settings.popup_alignment }};">
                {{ popup_body }}
              </p>
              <div class="field field--with-error">
                <input
                  autocomplete="email"
                  type="email"
                  id="ContactForm-email"
                  class="field__input"
                  name="contact[email]"
                  spellcheck="false"
                  autocapitalize="off"
                  value="{% if form.email %}{{ form.email }}{% elsif customer %}{{ customer.email }}{% endif %}"
                  aria-required="true"
                  {% if form.errors contains 'email' %}
                  aria-invalid="true"
                  aria-describedby="ContactForm-email-error"
                  {% endif %}
                  placeholder="{{ 'templates.contact.form.email' | t }}">
                <label class="field__label" for="ContactForm-email">{{ 'templates.contact.form.email' | t }}
                  <span aria-hidden="true">*</span>
                </label>
                {%- if form.errors contains 'email' -%}
                  <small class="contact__field-error" id="ContactForm-email-error">
                    <span class="visually-hidden">{{ 'accessibility.error' | t }}</span>
                    <span class="form__message">{% render 'icon-error' %}{{ form.errors.translated_fields['email'] | capitalize }} {{ form.errors.messages['email'] }}</span>
                  </small>
                {%- endif -%}
              </div>
            </div>
            <div class="contact__button">
              <button type="submit" class="button">
                {{ popup_button_label }}
              </button>
            </div>
          {%- endform -%}
        </div>
      </div>
    </div>
  </div>

  <div
    id="tp-email-success-popup"
    class="tp-success-popup popup"
    data-context="{{ popup_context }}">
    <div class="popup-content">
      <span class="close-popup" id="success-popup-close-button">&times;</span>
      <div style="padding: 40px 20px 20px 20px; display: flex; justify-content: center; align-items: center; line-height: 1.2;">
        {{ success_msg }}
      </div>
    </div>
  </div>

  <script>
      document.addEventListener("DOMContentLoaded", function () {
    if (window.location.href.includes("challenge")) {      
      return; // Stop script execution
    }

    const popup = document.getElementById("email-popup");
    const successPopup = document.getElementById("tp-email-success-popup");
    const closeButton = document.getElementById("popup-close-button");
    const successCloseButton = document.getElementById("success-popup-close-button");
    const isThemeEditor = window.Shopify && window.Shopify.designMode;
    const showPopup = {{ settings.show_popup_in_editor }};
    const showPopupSuccess = {{ settings.test_popup_success_state }};

    const context = (popup && popup.dataset && popup.dataset.context) || 'default';
    const popupEnabled = {{ settings.enable_popup | json }};
    const hapnyPopupEnabled = {{ settings.enable_hapny_popup | json }};
    const isHapnyContext = context === "hapny";
    const shouldShowPopup = isHapnyContext ? hapnyPopupEnabled : popupEnabled;
    const popupDelaySeconds = {{ popup_delay_seconds | json }};
    const popupDelayMs = Math.max(0, Number(popupDelaySeconds) * 1000 || 0);

    // Fire GA4 event when popup submission succeeds
    function reportPopupSuccess(context) {
      if (window.dataLayer && typeof window.dataLayer.push === "function") {
        window.dataLayer.push({
          event: "newsletter_popup_success",
          popup_context: context
        });
      } else if (typeof window.gtag === "function") {
        window.gtag("event", "newsletter_popup_success", {
          popup_context: context
        });
      }
    }

    // Fire GA4 event when popup is viewed
    function reportPopupView(context) {
      const eventCookieName = "popupViewEventSent_" + context;
      if (getCookie(eventCookieName)) {
        return;
      }

      if (window.dataLayer && typeof window.dataLayer.push === "function") {
        window.dataLayer.push({
          event: "newsletter_popup_view",
          popup_context: context
        });
      } else if (typeof window.gtag === "function") {
        window.gtag("event", "newsletter_popup_view", {
          popup_context: context
        });
      }

      setCookie(eventCookieName, "true", 7);
    }

    // Function to set a cookie
    function setCookie(name, value, days) {
      let expires = "";
      if (days) {
        let date = new Date();
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
        expires = "; expires=" + date.toUTCString();
      }
      document.cookie = name + "=" + value + "; path=/" + expires;
    }

    // Function to get a cookie
    function getCookie(name) {
      let nameEQ = name + "=";
      let ca = document.cookie.split(";");
      for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === " ") c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
      }
      return null;
    }

    // Debugging: Check if the cookie exists
    // console.log("Popup cookie value:", getCookie("popupShown"));

    // Show pop-up if cookie is NOT set
    if (popup && shouldShowPopup && !getCookie("popupShown_" + context)) {
      setTimeout(() => {
        popup.classList.add("active");
        setCookie("popupShown_" + context, "true", 7); // Set cookie to expire in 7 days
        reportPopupView(context);
      }, popupDelayMs);
    } else if (showPopup && popup && isThemeEditor && !showPopupSuccess) {
      setTimeout(() => {
        popup.classList.add("active");
        if (shouldShowPopup) {
          reportPopupView(context);
        }
      }, 500);
    }
    if (closeButton) {
      closeButton.addEventListener("click", () => {
        popup.classList.remove("active");
        popup.style.display = "none";
      });
    }

    if (successCloseButton) {
      successCloseButton.addEventListener("click", () => {
        successPopup.classList.remove("active");
        popup.classList.remove("active");
        popup.style.display = "none";
      });
    }

    if (popup) {
      popup.addEventListener("click", (e) => {
        if (e.target !== popup) return;
        popup.classList.remove("active");
        popup.style.display = "none";
      });
    }

    if (successPopup) {
      successPopup.addEventListener("click", (e) => {
        if (e.target !== successPopup) return;
        successPopup.classList.remove("active");
        popup.classList.remove("active");
        popup.style.display = "none";
      });
    }

    // Show success pop-up if form submission was successful
    if (window.location.search.includes("customer_posted=true") && successPopup) {
      successPopup.classList.add("active");
      successCloseButton.addEventListener("click", () => {
        document.getElementById("tp-email-success-popup").style.display = "none";
      });
      setCookie("popupSuccessShown_" + context, "true", 7);
      reportPopupSuccess(context);
      if (window.history && window.history.replaceState) {
        try {
          const updatedUrl = new URL(window.location.href);
          updatedUrl.searchParams.delete("customer_posted");
          window.history.replaceState(null, "", updatedUrl.toString());
        } catch (error) {}
      }
    } else if (showPopupSuccess && popup && isThemeEditor && showPopup) {
      successPopup.classList.add("active");
      successCloseButton.addEventListener("click", () => {
        document.getElementById("tp-email-success-popup").style.display = "none";
      });
    }
      });
  </script>

  <style > :root
  {
    --tp-popup-w-d: {{ settings.d_popup_width | default: 600 }}px;
    --tp-popup-h-d: {{ settings.d_popup_height | default: 550 }}px;
    --tp-popup-w-m: {{ settings.m_popup_width | default: 340 }}px;
    --tp-popup-h-m: {{ settings.m_popup_height | default: 420 }}px;
  }
</style>
<style>
  /* Background overlay covering the whole page */
  .overlay,
  .popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, {{ popup_overlay_opacity }});
    /* Black background with transparency */
    display: flex;
    align-items: center;
    justify-content: center;
    visibility: hidden;
    opacity: 0;
    transition: opacity 0.3s ease
    , visibility 0.3s;
  }

  .popup {
    font-size: {{ popup_body_font_desktop }};
  }

  .popup-header {
    font-size: {{ popup_header_font_desktop }};
  }

  .popup-subheader {
    font-size: {{ popup_subheader_font_desktop }};
  }

  @media (max-width: 700px) {
    .popup {
      font-size: {{ popup_body_font_mobile }};
    }

    .popup-header {
      font-size: {{ popup_header_font_mobile }};
    }

    .popup-subheader {
      font-size: {{ popup_subheader_font_mobile }};
    }
  }

  /* Pop-up box */
  .popup-content {
    overflow: auto;
    background: {{ popup_panel_color }};
    padding: {{ settings.d_popup_outer_padding }};
    border-radius: {{ popup_border_radius }}px;
    text-align: center;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    width: var(--tp-popup-w-d);
    max-width: min(90vw, var(--tp-popup-w-d));
    height: var(--tp-popup-h-d);
    max-height: min(90vh, var(--tp-popup-h-d));
    display: flex;
    flex-direction: column;
    justify-content: center;
    position: relative;
    backdrop-filter: blur({{ popup_background_blur }}px);
    -webkit-backdrop-filter: blur({{ popup_background_blur }}px);
  }


  /* Close button */
  .close {
    position: absolute;
    top: 15px;
    right: 15px;
    font-size: 24px;
    cursor: pointer;
  }

  /* Show the pop-up when active */
  .popup.active {
    visibility: visible;
    opacity: 1;
    z-index: 3;
  }

  .popup-inner {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: stretch;
    justify-content: space-between;
    gap: 20px;
    height: 100%;
  }

  .popup-image-container,
  .popup-text-container {
    flex: 1 1 50%;
    box-sizing: border-box;
    align-content: center;
  }

  .popup-image-container {
    padding: 0;
    height: auto;
    display: flex;
  }

  .popup-image-container img {
    flex-grow: 1;
  }

  .popup-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    border-top-left-radius: {{ popup_border_radius }}px;
    border-bottom-left-radius: {{ popup_border_radius }}px;
    max-height: 100%;
  }

  @media (max-width: 768px) {
    .popup-inner {
      flex-direction: column;
    }

    .popup-image-container,
    .popup-text-container {
      flex: 1 1 100%;
    }

    .popup-image-container {
      height: clamp(160px, calc(var(--tp-popup-h-m) * 0.35), 320px);
    }

    /* Pop-up box */
    .popup-content {
      width: var(--tp-popup-w-m);
      max-width: min(94vw, var(--tp-popup-w-m));
      padding: {{ settings.m_popup_outer_padding }};
      height: var(--tp-popup-h-m);
      max-height: min(90vh, var(--tp-popup-h-m));
    }
  }
</style>

<style>
  .tp-success-popup {
    display: flex;
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, {{ popup_overlay_opacity }});
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .popup-content input {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  .popup-content button {
    width: 100%;
    padding: 10px;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  .close-popup {
    float: right;
    font-size: 20px;
    cursor: pointer;
    position: absolute;
    top: 10px;
    right: 20px;
  }

  .field:after {
    border: none;
    box-shadow: none;
  }

  .field:hover.field:after {
    border: none;
    box-shadow: none;
  }

  .popup .field__label {
    top: 50%;
    transform: translateY(-50%);
  }

  .popup .field__input:not(:placeholder-shown)~.field__label {
    top: 20px;
  }


  .popup .field__input:focus~.field__label {
    top: 20px;
  }
  .popup .field__input:focus,
  .popup .field__input:not(:placeholder-shown) {
    margin: 10px 0;
  }
</style>{% endunless %}
