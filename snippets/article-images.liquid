<style>
  .dynamic-image-container {
    margin: 1.5rem 0;
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    justify-content: flex-start;
  }

  .dynamic-image-item {
    max-width: 200px;
    margin-bottom: 10px;
    transition: transform 0.2s ease;
    border-radius: 5px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .dynamic-image-item:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }

  .dynamic-image-item a {
    display: block;
    text-decoration: none;
    color: inherit;
  }

  .dynamic-image-item img {
    width: 100%;
    height: auto;
    display: block;
    border-radius: 5px 5px 0 0;
  }

  .dynamic-image-caption {
    padding: 8px;
    font-size: 0.9rem;
    text-align: center;
    background: #f9f9f9;
  }

  .image-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 50px;
    margin: 1rem 0;
  }

  .image-loading:after {
    content: " ";
    display: block;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    border: 4px solid #ccc;
    border-color: #ccc transparent #ccc transparent;
    animation: image-loading 1.2s linear infinite;
  }

  @keyframes image-loading {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<script>
  go();
  function go(){
    const articleContent = document.querySelector('.article-template__content');
    if (!articleContent) return;

    const elementsToProcess = articleContent.querySelectorAll('p, h2, h3');
    const processedElements = new Set();

    elementsToProcess.forEach(element => {
      if (processedElements.has(element)) return;

      const links = element.querySelectorAll('a');
      const shopifyLinks = [];

      links.forEach(link => {
        const href = link.getAttribute('href');
        if (!href) return;

        const isProductLink = href.includes('/products/');
        const isCollectionLink = href.includes('/collections/') && !href.includes('/products');
        const isBlogLink = href.includes('/blogs/');

        if (isProductLink || isCollectionLink || isBlogLink) {
          let type, handle, blogHandle, articleHandle;

          if (isProductLink) {
            type = 'product';
            handle = href.split('/products/')[1].split(/[?#]/)[0];
          } else if (isCollectionLink) {
            type = 'collection';
            handle = href.split('/collections/')[1].split(/[?#]/)[0];
          } else if (isBlogLink) {
            const parts = href.split('/blogs/')[1].split(/[?#]/)[0].split('/');
            blogHandle = parts[0];
            if (parts.length > 1) {
              articleHandle = parts[1];
            }
            type = 'blog';
            handle = blogHandle;
          }

          shopifyLinks.push({
            element: link,
            href,
            type,
            handle,
            blogHandle,
            articleHandle
          });
        }
      });

      if (shopifyLinks.length > 0) {
        processedElements.add(element);

        const imageContainer = document.createElement('div');
        imageContainer.className = 'dynamic-image-container';

        const loadingIndicator = document.createElement('div');
        loadingIndicator.className = 'image-loading';
        imageContainer.appendChild(loadingIndicator);

        element.after(imageContainer);

        const imagePromises = shopifyLinks.map(link => {
          return fetchImageInfo(link).then(info => {
            if (info && info.imageUrl) {
              return createImageElement(info, link.href);
            }
            return null;
          }).catch(error => {
            console.error('Error fetching image info:', error);
            return null;
          });
        });

        Promise.all(imagePromises).then(imageElements => {
          loadingIndicator.remove();

          imageElements.filter(el => el !== null).forEach(el => {
            imageContainer.appendChild(el);
          });

          if (imageContainer.children.length === 0) {
            imageContainer.remove();
          }
        });
      }
    });
  }

  function fetchImageInfo(link) {
    switch (link.type) {
      case 'product':
        return fetchProductImage(link.handle);
      case 'collection':
        return fetchCollectionImage(link.handle);
      case 'blog':
        if (link.articleHandle) {
          return fetchArticleImage(link.blogHandle, link.articleHandle);
        } else {
          return fetchBlogImage(link.blogHandle);
        }
      default:
        return Promise.resolve(null);
    }
  }

  function createImageElement(info, href) {
    const imageItem = document.createElement('div');
    imageItem.className = 'dynamic-image-item';

    const link = document.createElement('a');
    link.href = href;

    const img = document.createElement('img');
    img.src = info.imageUrl;
    img.alt = info.title;
    img.loading = 'lazy';

    const caption = document.createElement('div');
    caption.className = 'dynamic-image-caption';
    caption.textContent = info.title;

    link.appendChild(img);
    link.appendChild(caption);
    imageItem.appendChild(link);

    return imageItem;
  }

  function fetchProductImage(handle) {
    return fetch(`/products/${handle}.json`)
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then(json => {
        const imageUrl = json.product?.image?.src || '';
        const imageTitle = json.product?.title || '';
        if (imageUrl) return { imageUrl, title: imageTitle };
        throw new Error('No image found for product');
      });
  }

  function fetchCollectionImage(handle) {
    return fetch(`/collections/${handle}.json`)
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then(json => {
        const imageUrl = json.collection?.image?.src || '';
        const imageTitle = json.collection?.title || '';
        if (imageUrl) return { imageUrl, title: imageTitle };
        throw new Error('No image found for collection');
      });
  }

  function fetchArticleImage(blogHandle, articleHandle) {
    return fetch(`/blogs/${blogHandle}/${articleHandle}?view=json`)
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.text();
      })
      .then(html => {
        const doc = new DOMParser().parseFromString(html, 'text/html');
        const img = doc.querySelector('.article__featured-image, .article-featured-image img');
        const titleElem = doc.querySelector('.article__title, .article-title');
        const imageUrl = img?.currentSrc || img?.src || img?.dataset?.src || '';
        const title = titleElem?.textContent.trim() || articleHandle.replace(/-/g, ' ');
        return { imageUrl, title };
      });
  }

  function fetchBlogImage(blogHandle) {
    return fetch(`/blogs/${blogHandle}?view=json`)
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.text();
      })
      .then(html => {
        const doc = new DOMParser().parseFromString(html, 'text/html');
        const img = doc.querySelector('.blog-hero__image, .blog-featured-image img');
        const titleElem = doc.querySelector('.blog-hero__title, .blog-title');
        const imageUrl = img?.currentSrc || img?.src || img?.dataset?.src || '';
        const title = titleElem?.textContent.trim() || `Blog: ${blogHandle.replace(/-/g, ' ')}`;
        return { imageUrl, title };
      });
  }
</script>